[Config]  # NE PAS MODIFIER
 ├nbAlgo=2   # Nombre occurences objet algorithm dans le formulaire
 ├nbAlgoHyperparamVal=1    #Nombre d'occurences object Hyperparameter Value par algorithm dans le formulaire
 ├nbDataset=1    #Nombre occurences object dataset dans le formulaire
 ├nbDatasetShape=1      #Nombre occurences object shape par dataset dans le formulaire
 ├datasetInferenceProperties=1      #Nombre occurences object InferenceProperties par dataset dans le formulaire
 ├nbMeasures=1      #Nombre occurences object Measures dans le formulaire
 ├infraComponents=1    #Nombre occurences object Components dans le formulaire
 └
 [header]                                                                                             #MANDATORY : information about the source of the report and publishing organization's details
 ├licensing=H1                                                                                         #OPTIONAL as {String} : the type of licensing applicable for the sharing of the report
 ├formatVersion=H2                                                                                   #MANDATORY as {String} : the version of the specification of this set of schemas defining the report's fields
 ├formatVersionSpecificationUri=H3                                                                     #OPTIONAL as {String} : the URI of the present specification of this set of schemas
 ├reportId= H4                                                                                          #MANDATORY as {String} : the unique identifier of this report, preferably as a uuid4 string
 ├reportDatetime= H5                                                                                    #OPTIONAL as {String} : the publishing date of this report in format YYYY-MM-DD HH:MM:SS
 ├reportStatus= H6                                                                                     #MANDATORY value in {draft, final, corrective, $other} : the status of this report
 |  [publisher]                                                                                      #MANDATORY : the details about the publishing organization who produced the report
 |   ├name=HP1                                                                                          #OPTIONAL as {String} : name of the organization
 |   ├division=HP2                                                                                      #OPTIONAL as {String} : name of the publishing department within the organization
 |   ├projectName= HP3                                                                                   #OPTIONAL as {String} : name of the publishing project within the organization
 |   ├confidentialityLevel= HP5                                                                          #MANDATORY value in {public, internal, confidential, secret} : the confidentiality of the report
 |   ├publicKey=     HP7                                                                           #OPTIONAL as {String} : the cryptographic public key to check the identity of the publishing organization
 |   └                                                                                               
 └                                                                                                   
[task]                                                                                               #MANDATORY : the nature of the task being measured
 ├taskType=  T1                                                                                        #MANDATORY as {String} : type of the computing task of machine learning, example : datacreation, preprocessing, supervisedLearning, unsupervisedLearning, semiSupervisedLearning ...
 ├taskFamily=  T2                                                                                      #MANDATORY as {String} : the family of task performed, example : classification, regression, chatbot, summarization, keyword extraction, image recognition...
 ├taskStage=   T3                                                                                      #MANDATORY as {String} : stage of the task, example: training, finetuning, reinforcement, inference, rag...
 ├(algorithms.1)                                                                                     #MANDATORY : the main algorithmic approache(s) used by the computing task, Please fill as many columns as you need to describe your components
 |   ├algorithmName= TA11                                                                                 #MANDATORY as {String} : the case-sensitive common name of the algorithm, example: randomForest, svm, xgboost...
 |   ├framework=     TA12                                                                                #OPTIONAL as {String} : the common name of the software framework implementing the algorithm, if any
 |   ├frameworkVersion= TA13                                                                             #OPTIONAL as {String} : the version of the software framework implementing the algorithm, if any
 |   ├classPath=           TA14                                                                          #OPTIONAL as {String} : the full class path of the algorithm within the framework, with elements separated by dots
 |   |  [hyperparameters]                                                                            #OPTIONAL : 
 |   |   ├tuning_method=    TA1H1                                                                         #OPTIONAL as {String} : the method of hyperparameters tuning used (if any), example: gridSearch, randomizedSearch...
 |   |   ├(values.1)                                                                                 #OPTIONAL : Please fill as many columns as you need to describe your components
 |   |   |   ├hyperparameterName= TA1HV1                                                                    #OPTIONAL as {String} : the name of the hyperparameter, example: c, kernel, gamma, class_weight...
 |   |   |   ├hyperparameterValue= TA1HV2                                                                   #OPTIONAL as {String} : the value of the hyperparameter, example: rbf, 1e-4, 10, linear...
 |   |   |   └                                                                                       
 |   |   └                                                                                           
 |   ├quantization=  TA15                                                                                #MANDATORY as {Float} : the data weights (in bits) obtained thanks to the quantization, example: 2, 8, 16...
 |   └                                                                                               
 ├(algorithms.2)                                                                                     #MANDATORY : the main algorithmic approache(s) used by the computing task, Please fill as many columns as you need to describe your components
 |   ├algorithmName=TA21                                                                                 #MANDATORY as {String} : the case-sensitive common name of the algorithm, example: randomForest, svm, xgboost...
 |   ├framework=TA22                                                                                     #OPTIONAL as {String} : the common name of the software framework implementing the algorithm, if any
 |   ├frameworkVersion=   TA23                                                                           #OPTIONAL as {String} : the version of the software framework implementing the algorithm, if any
 |   ├classPath=   TA24                                                                                  #OPTIONAL as {String} : the full class path of the algorithm within the framework, with elements separated by dots
 |   |  [hyperparameters]                                                                            #OPTIONAL : 
 |   |   ├tuning_method= TA2H1                                                                             #OPTIONAL as {String} : the method of hyperparameters tuning used (if any), example: gridSearch, randomizedSearch...
 |   |   ├(values.1)                                                                                 #OPTIONAL : Please fill as many columns as you need to describe your components
 |   |   |   ├hyperparameterName= TA2H1V1                                                                   #OPTIONAL as {String} : the name of the hyperparameter, example: c, kernel, gamma, class_weight...
 |   |   |   ├hyperparameterValue=  TA2H1V2                                                                 #OPTIONAL as {String} : the value of the hyperparameter, example: rbf, 1e-4, 10, linear...
 |   |   |   └                                                                                       
 |   |   └                                                                                           
 |   ├quantization=  TA25                                                                                #MANDATORY as {Float} : the data weights (in bits) obtained thanks to the quantization, example: 2, 8, 16...
 |   └                                                                                               
 ├(dataset.1)                                                                                        #MANDATORY : the list of dataset processed by the computing task. Please fill as many columns as you need to describe your components
 |   ├dataType= TD11                                                                                     #MANDATORY value in {tabular, audio, boolean, image, video, object, text, $other} : the nature of the data, purposedly limited to basic types
 |   ├fileType= TD12                                                                                     #OPTIONAL as {String} : the file type of the dataset
 |   ├volume=  TD13                                                                                      #MANDATORY as {Integer} : the size of the dataset
 |   ├volumeUnit= TD14                                                                                    #MANDATORY as {String} : the unit of the size of the dataset
 |   ├items=  TD15                                                                                       #OPTIONAL as {Integer} : the number of items in the dataset
 |   ├(shape.1)                                                                                      #OPTIONAL : the shape of each dataset item (for instance, an array of size 3, for greyscale images). Please fill as many columns as you need to describe your components
 |   |   ├item= TD1S1                                                                                     #OPTIONAL as {Integer} : 
 |   |   └                                                                                           
 |   ├(inferenceProperties.1)                                                                        #MANDATORY : if you are describing an inference, please describe the type of queries sent to the model. Please fill as many columns as you need to describe your components
 |   |   ├nbRequest= TD1IP1                                                                                #MANDATORY as {Integer} : the number of requests the measure corresponds to (for example 100 prompts or 100 images)
 |   |   |  [parametersNLP]                                                                          #OPTIONAL : if you are using inference on a NLP task, please fill these properties
 |   |   |   ├nbTokensInput= TD1IP1P1                                                                          #OPTIONAL as {Integer} : the number of tokens in the input
 |   |   |   ├nbWordsInput=     TD1IP1P2                                                                     #OPTIONAL as {Integer} : the number of words in the input
 |   |   |   ├nbTokensOutput=   TD1IP1P3                                                                     #OPTIONAL as {Integer} : the number of tokens in the response
 |   |   |   ├nbWordsOutput=  TD1IP1P4                                                                       #OPTIONAL as {Integer} : the number of words in the response
 |   |   |   ├contextWindowSize=    TD1IP1P5                                                                 #OPTIONAL as {Integer} : the number of tokens your system keeps in memory to generate the next answer
 |   |   |   ├cache= TD1IP1P6                                                                               #fsrqefsdfqsdfqqsfdq
 |   |   |   └                                                                                       
 |   |   └                                                                                           
 |   ├source=  TD16                                                                                      #OPTIONAL as {String} : the kind of source of the dataset
 |   ├sourceUri= TD17                                                                                     #OPTIONAL as {String} : the URI of the dataset if available
 |   ├owner=  TD18                                                                                       #OPTIONAL as {String} : the owner of the dataset if available
 |   └                                                                                               
 ├measuredAccuracy=  T4                                                                                #OPTIONAL as {Float} : the measured accuracy of your model (between 0 and 1)
 ├estimatedAccuracy= T5                                                                                #OPTIONAL value in {veryPoor, poor, average, good, veryGood} : if you didn't measure the accuracy of your model in concrete percentages, you can give an assessment of the precision between: VERY POOR, POOR, AVERAGE, GOOD, VERY GOOD
 └                                                                                                   
[measures]                                                                                           #MANDATORY : 
 ├(measures.1)                                                                                       #MANDATORY : the software and/or hardware measures of the computing task. Please fill as many columns as you need to describe your components
 |   ├measurementMethod= M11                                                                            #MANDATORY as {String} : the method used to perform the energy or FLOPS measure, example: codecarbon, carbonai, flops-compute, wattmeter...
 |   ├manufacturer=       M12                                                                           #OPTIONAL as {String} : the builder of the measuring tool, if the measurement method is wattmeter
 |   ├version=               M13                                                                        #OPTIONAL as {String} : the version of the measuring tool, if any
 |   ├cpuTrackingMode=     M14                                                                          #OPTIONAL as {String} : the method used to track the consumption of the CPU, example: constant, rapl...
 |   ├gpuTrackingMode=        M15                                                                       #OPTIONAL as {String} : the method used to track the consumption of the GPU, example: constant, nvml...
 |   ├averageUtilizationCpu=  M16                                                                       #OPTIONAL as {String} : the average percentage of use of the CPU during the task, for example: 0.5 if your CPU load was 50% on average
 |   ├averageUtilizationGpu= M17                                                                        #OPTIONAL as {String} : the average percentage of use of the GPU during the task, for example: 0.8 if your GPU load was 80% on average
 |   ├serverSideInference=  M18                                                                         #OPTIONAL as {String} : if you practice inference through an API, do you estimate the consumption of the model server alone ? (because the model is deployed on your own server and you have access to the measurement, or because you have estimated it with a tool like EcoLogits). Or do you estimate the consumption from the inference server side or from both side at the same time ?
 |   ├unit=         M19                                                                                 #MANDATORY value in {Wh, kWh, MWh, GWh, kJoule, MJoule, GJoule, TJoule, PJoule, BTU, kiloFLOPS, megaFLOPS, gigaFLOPS, teraFLOPS, petaFLOPS, exaFLOPS, zettaFLOPS, yottaFLOPS} : the unit of the power consumption measure of the computing task
 |   ├powerCalibrationMeasurement=M110                                                                   #OPTIONAL as {Float} : the power consumed during the calibration measure if any (to isolate the initial consumption of the hardware)
 |   ├durationCalibrationMeasurement=M111                                                                #OPTIONAL as {Float} : the duration of the calibration if any (in seconds)
 |   ├powerConsumption=     M112                                                                         #MANDATORY as {Float} : the power consumption measure of the computing task
 |   ├measurementDuration= M113                                                                          #OPTIONAL as {Float} : the duration of the measurement (in seconds)
 |   ├measurementDateTime= M114                                                                          #OPTIONAL as {Float} : the date when the measurement began, in format YYYY-MM-DD HH:MM:SS
 |   └                                                                                               
 └                                                                                                   
[system]                                                                                             #MANDATORY : system information of the infrastructure on which is run the computing task
 ├os= S1                                                                                                #MANDATORY as {String} : name of the operating system
 ├distribution= S2                                                                                     #OPTIONAL as {String} : distribution of the operating system
 ├distributionVersion= S3                                                                               #OPTIONAL as {String} : distribution's version of the operating system
 └                                                                                                   
[infrastructure]                                                                                     #MANDATORY : the infrastructure on which is performed the computing task
 ├infraType= I1                                                                                        #MANDATORY value in {publicCloud,privateCloud,onPremise,$other} : the type of infrastructure used for the task
 ├cloudProvider= I2                                                                                    #OPTIONAL as {String} : If you are on the cloud, the name of your cloud provider, for example : aws, azure, google, ovh...
 ├cloudInstance= I3                                                                                    #OPTIONAL as {String} : If you are on the cloud, the name of your cloud instance, for example : a1.large, dasv4-type2...
 ├(components.1)                                                                                     #MANDATORY : Please fill as many columns as you need to describe your components
 |   ├componentName= IC11                                                                                 #MANDATORY as {String} : the type of this subsystem part of your infrastructure, example: cpu, gpu, hdd, sdd...
 |   ├nbComponent=  IC12                                                                                 #MANDATORY as {Integer} : the number of items of this component in your infrastructure
 |   ├memorySize=  IC13                                                                                  #OPTIONAL as {Integer} : the size of the memory of the component in Gbytes
 |   ├manufacturer=  IC14                                                                                #OPTIONAL as {String} : the name of the manufacturer, example: nvidia
 |   ├family=     IC15                                                                                   #OPTIONAL as {String} : the family of this component, example: geforce
 |   ├series=  IC16                                                                                      #OPTIONAL as {String} : the series of this component, example: rtx4080
 |   ├share= IC17                                                                                       #dqsfmopgijqsdemofgijdsmoqifjqsdmoij
 |   └                                                                                               
 └                                                                                                   
[environment]                                                                                        #MANDATORY : environment of the infrastructure: region of calculation and energy used
 ├country= E1                                                                                          #MANDATORY as {String} : 
 ├latitude= E2                                                                                         #OPTIONAL as {Float} : 
 ├longitude= E3                                                                                        #OPTIONAL as {Float} : 
 ├location=  E4                                                                                        #OPTIONAL as {String} : 
 ├powerSupplierType= E5                                                                                 #OPTIONAL value in {public, private, internal, $other} : 
 ├powerSource= E6                                                                                      #OPTIONAL value in {solar, wind, nuclear, hydroelectric, gas, coal, $other} : 
 ├powerSourceCarbonIntensity= E7                                                                        #OPTIONAL as {Float} : 
 └                                                                                                   
quality= H7                                                                                            #OPTIONAL value in {high, medium, low } : the quality of the information you provided, 3 possibilities : high (percentage error +/-10%), medium (percentage error +/-25%), low (percentage error +/-50%)
[$hash]                                                                                              #MANDATORY : 
 ├hashAlgorithm= HA1                                                                                     #MANDATORY value in {MD5, RIPEMD-128, RIPEMD-160, RIPEMD-256, RIPEMD-320, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512} : the hash function to apply first to the JSON report
 ├cryptographicAlgorithm= HA2                                                                               #MANDATORY value in {RSA, DSA, ECDSA, EDDSA} : the public key function to apply to the hash
 ├value=  HA3                                                                                        #gfqsmdljkgsdlmfkgjslmkj
 └ 